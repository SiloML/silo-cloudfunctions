{
  "_args": [
    [
      {
        "raw": "retry-request@^4.0.0",
        "scope": null,
        "escapedName": "retry-request",
        "name": "retry-request",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/Users/michellelim/Documents/uppercase/functions/node_modules/google-gax"
    ]
  ],
  "_from": "retry-request@^4.0.0",
  "_hasShrinkwrap": false,
  "_id": "retry-request@4.1.1",
  "_location": "/retry-request",
  "_nodeVersion": "11.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/retry-request_4.1.1_1560895103562_0.976871618711407"
  },
  "_npmUser": {
    "name": "stephenplusplus",
    "email": "stephenplusplusplus@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "ms": "2.1.2"
  },
  "_requested": {
    "raw": "retry-request@^4.0.0",
    "scope": null,
    "escapedName": "retry-request",
    "name": "retry-request",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@google-cloud/common",
    "/google-gax"
  ],
  "_resolved": "https://registry.npmjs.org/retry-request/-/retry-request-4.1.1.tgz",
  "_shasum": "f676d0db0de7a6f122c048626ce7ce12101d2bd8",
  "_shrinkwrap": null,
  "_spec": "retry-request@^4.0.0",
  "_where": "/Users/michellelim/Documents/uppercase/functions/node_modules/google-gax",
  "author": {
    "name": "Stephen Sawchuk",
    "email": "sawchuk@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/stephenplusplus/retry-request/issues"
  },
  "dependencies": {
    "debug": "^4.1.1",
    "through2": "^3.0.1"
  },
  "description": "Retry a request.",
  "devDependencies": {
    "async": "^3.0.1",
    "lodash.range": "^3.2.0",
    "mocha": "^6.1.4",
    "request": "^2.87.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-BINDzVtLI2BDukjWmjAIRZ0oglnCAkpP2vQjM3jdLhmT62h0xnQgciPwBRDAvHqpkPT2Wo1XuUyLyn6nbGrZQQ==",
    "shasum": "f676d0db0de7a6f122c048626ce7ce12101d2bd8",
    "tarball": "https://registry.npmjs.org/retry-request/-/retry-request-4.1.1.tgz",
    "fileCount": 5,
    "unpackedSize": 12419,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdCV6ACRA9TVsSAnZWagAAuZsP/3raFK/UAjT7/KgPD4ga\nctk0QNqPh835phun4tjFEdbzSaC1gwTf1EH/EWSJyc2mzN2lBv8+1RR+lUd0\nVI9VS+0axegmV+IbxQrPkQ61UfG+xSnG2/sttMcp4JZXfP03Z7rNxL3O1WEf\nsCvvcNPUd73Qxsj+e5zOazbZeuOVCCdYPTLL2FrwpXD3Uk2G79WTsF2qK3YF\nxSnEKi9TQcuUpcQSkMZSf/brtz47bbFvglviTUEkt8v61JVSSu47gb6edW/2\nnV/lxPUkYA9+JJjwkHaqQZW209NL09QV1xN97FJHi9BWfbpkiNeGOq2znH1g\n2Zd/TeI5vWhe+Pcza0Byi8xCC14Tg43ZXpR5wcSq2L6YUagFQkEBpDlSyaj5\n68XsTK1hDf3fqcDuqYz7ShxMkgq7enMTblXxwEaxHgZuDDFWPB6La01abgz7\nZpEH5D2AvTxIasmPkznNWZDhuafgy75dol4NB1yMtJ1HXQqyCpbNvk5CXzsB\n2A/0XaKxtTod14vakQuhy0+xqolYd4/2fmUiGhLjhB9UcTaikKtFLEJy19Yy\nzvjVlaM8L5JdycrFebeuRBKXxaXUhMOYVwHwUFr2SUBGuPOuRNA4pISD3UVV\nhCRrRxDiM6ZYDjpLF4Y73TawBCMP79vdPhR4qazXNW+h22k/j98ZE0b3ZjrS\nLlfn\r\n=czpS\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.10.0"
  },
  "files": [
    "index.js",
    "index.d.ts",
    "license"
  ],
  "gitHead": "6f69c95dceada6b4255c148fbd27c4d530fcec3e",
  "homepage": "https://github.com/stephenplusplus/retry-request#readme",
  "keywords": [
    "request",
    "retry",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "stephenplusplus",
      "email": "sawchuk@gmail.com"
    }
  ],
  "name": "retry-request",
  "optionalDependencies": {},
  "readme": "|![retry-request](logo.png)\n|:-:\n|Retry a [request][request] with built-in [exponential backoff](https://developers.google.com/analytics/devguides/reporting/core/v3/coreErrors#backoff).\n\n```sh\n$ npm install --save request\n$ npm install --save retry-request\n```\n```js\nvar request = require('retry-request', {\n  request: require('request')\n});\n```\n\nIt should work the same as `request` in both callback mode and stream mode.\n\nNote: This module only works when used as a readable stream, i.e. POST requests aren't supported  ([#3](https://github.com/stephenplusplus/retry-request/issues/3)).\n\n## Do I need to install `request`?\n\nYes! You must independently install `request` and provide it to this library:\n\n```js\nvar request = require('retry-request', {\n  request: require('request')\n});\n```\n\n*The code will actually look for the `request` module automatically to save you this step. But, being explicit like in the example is also welcome.*\n\n#### Callback\n\n`urlThatReturns503` will be requested 3 total times before giving up and executing the callback.\n\n```js\nrequest(urlThatReturns503, function (err, resp, body) {});\n```\n\n#### Stream\n\n`urlThatReturns503` will be requested 3 total times before giving up and emitting the `response` and `complete` event as usual.\n\n```js\nrequest(urlThatReturns503)\n  .on('error', function () {})\n  .on('response', function () {})\n  .on('complete', function () {});\n```\n\n## Can I monitor what retry-request is doing internally?\n\nYes! This project uses [debug](https://www.npmjs.com/package/debug) to provide the current retry attempt, each response status, and the delay computed until the next retry attempt is made. To enable the debug mode, set the environment variable `DEBUG` to *retry-request*.\n\n(Thanks for the implementation, @yihaozhadan!)\n\n## request(requestOptions, [opts], [cb])\n\n### requestOptions\n\nPassed directly to `request`. See the list of options supported: https://github.com/request/request/#requestoptions-callback.\n\n### opts *(optional)*\n\n#### `opts.noResponseRetries`\n\nType: `Number`\n\nDefault: `2`\n\nThe number of times to retry after a response fails to come through, such as a DNS resolution error or a socket hangup.\n\n```js\nvar opts = {\n  noResponseRetries: 0\n};\n\nrequest(url, opts, function (err, resp, body) {\n  // url was requested 1 time before giving up and\n  // executing this callback.\n});\n```\n\n#### `opts.objectMode`\n\nType: `Boolean`\n\nDefault: `false`\n\nSet to `true` if your custom `opts.request` function returns a stream in object mode.\n\n#### `opts.retries`\n\nType: `Number`\n\nDefault: `2`\n\n```js\nvar opts = {\n  retries: 4\n};\n\nrequest(urlThatReturns503, opts, function (err, resp, body) {\n  // urlThatReturns503 was requested a total of 5 times\n  // before giving up and executing this callback.\n});\n```\n\n#### `opts.currentRetryAttempt`\n\nType: `Number`\n\nDefault: `0`\n\n```js\nvar opts = {\n  currentRetryAttempt: 1\n};\n\nrequest(urlThatReturns503, opts, function (err, resp, body) {\n  // urlThatReturns503 was requested as if it already failed once.\n});\n```\n\n#### `opts.shouldRetryFn`\n\nType: `Function`\n\nDefault: Returns `true` if [http.incomingMessage](https://nodejs.org/api/http.html#http_http_incomingmessage).statusCode is < 200 or >= 400.\n\n```js\nvar opts = {\n  shouldRetryFn: function (incomingHttpMessage) {\n    return incomingHttpMessage.statusMessage !== 'OK';\n  }\n};\n\nrequest(urlThatReturnsNonOKStatusMessage, opts, function (err, resp, body) {\n  // urlThatReturnsNonOKStatusMessage was requested a\n  // total of 3 times, each time using `opts.shouldRetryFn`\n  // to decide if it should continue before giving up and\n  // executing this callback.\n});\n```\n\n#### `opts.request`\n\nType: `Function`\n\nDefault: `try { require('request') }`\n\nIf we cannot locate `request`, we will throw an error advising you to provide it explicitly.\n\n*NOTE: If you override the request function, and it returns a stream in object mode, be sure to set `opts.objectMode` to `true`.*\n\n```js\nvar originalRequest = require('request').defaults({\n  pool: {\n    maxSockets: Infinity\n  }\n});\n\nvar opts = {\n  request: originalRequest\n};\n\nrequest(urlThatReturns503, opts, function (err, resp, body) {\n  // Your provided `originalRequest` instance was used.\n});\n```\n\n### cb *(optional)*\n\nPassed directly to `request`. See the callback section: https://github.com/request/request/#requestoptions-callback.\n\n[request]: https://github.com/request/request\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stephenplusplus/retry-request.git"
  },
  "scripts": {
    "test": "mocha --timeout 0"
  },
  "types": "index.d.ts",
  "version": "4.1.1"
}
